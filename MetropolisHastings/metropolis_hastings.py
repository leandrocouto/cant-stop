import sys
sys.path.insert(0,'..')
import math
import copy
from game import Game
from play_game_template import play_single_game
from players.vanilla_uct_player import Vanilla_UCT
from players.uct_player import UCTPlayer
from players.random_player import RandomPlayer
from MetropolisHastings.parse_tree import ParseTree, Node
from MetropolisHastings.DSL import DSL
from Script import Script
import time
import pickle
import os.path
from random import sample
import numpy as np
import matplotlib.pyplot as plt
import multiprocessing
from concurrent.futures import ProcessPoolExecutor
import re


class MetropolisHastings:
    def __init__(self, beta, n_iterations, threshold, tree_max_nodes, 
        string_dataset, column_dataset, sub_folder_batch, file_name):
        """
        - beta is a constant used in the MH score function.
        - string_data and column_data is a 5-tuple of the game state 
          consisting of: (Game object, chosen_play, Q-value distribution, 
          importance, state round, total number of rounds)
        - n_iterations is the number of iteration in the main MH loop.
        - threshold will sample data only if the state importance is higher
          than this threshold.
        - tree is a parse tree implementation.
        - string_dataset and column_dataset is the filenames of the datasets 
          generated by the oracle by each type of action.
        - sub_folder_batch is the folder of the MH iteration resulting file.
        - file_name is the name of the MH iteration resulting file.
        """
        self.beta = beta
        self.string_data = []
        self.column_data = []
        self.n_iterations = n_iterations
        self.threshold = threshold
        self.tree_max_nodes = tree_max_nodes
        self.string_dataset = string_dataset
        self.column_dataset = column_dataset
        self.sub_folder_batch = sub_folder_batch
        self.file_name = file_name
        self.tree_string = ParseTree(DSL('S', True), self.tree_max_nodes)
        self.tree_column = ParseTree(DSL('S', False), self.tree_max_nodes)
        self.all_results = []
        self.passed_results = []
        self.data_distribution = None

        # Original version
        self.column_range = [2,12]
        self.offset = 2
        self.initial_height = 2 
        self.n_players = 2
        self.dice_number = 4
        self.dice_value = 6 
        self.max_game_length = 500

    def run(self):
        """ Main routine of the MH algorithm. """

        # Read the dataset
        with open(self.string_dataset, "rb") as f:
            while True:
                try:
                    self.string_data.append(pickle.load(f))
                except EOFError:
                    break
        with open(self.column_dataset, "rb") as f:
            while True:
                try:
                    self.column_data.append(pickle.load(f))
                except EOFError:
                    break
        full_run = time.time()

        data_string, data_column = self.sample_data_from_importance_threshold()

        self.tree_string.build_tree(self.tree_string.root)
        self.tree_column.build_tree(self.tree_column.root)

        # Main loop
        for i in range(self.n_iterations):
            start = time.time()
            # Make a copy of the tree for future mutation
            new_tree_string = pickle.loads(pickle.dumps(self.tree_string, -1))
            new_tree_column = pickle.loads(pickle.dumps(self.tree_column, -1))

            new_tree_string.mutate_tree()
            new_tree_column.mutate_tree()

            current_program_string = self.tree_string.generate_program()
            mutated_program_string = new_tree_string.generate_program()

            current_program_column = self.tree_column.generate_program()
            mutated_program_column = new_tree_column.generate_program()

            script_best_player = self.generate_player(
                                                current_program_string, 
                                                current_program_column
                                                )
            script_mutated_player = self.generate_player(
                                                mutated_program_string,
                                                mutated_program_column
                                                )

            score_best, _, _, _ = self.calculate_score_function(
                                                        script_best_player, 
                                                        data_string,
                                                        data_column
                                                        )
            score_mutated, errors_mutated, errors_rate_mutated, data_distribution = self.calculate_score_function(
                                                        script_mutated_player, 
                                                        data_string,
                                                        data_column
                                                        )
            n_errors = errors_mutated[0]
            n_errors_yes_action = errors_mutated[1]
            n_errors_no_action = errors_mutated[2]
            n_errors_numeric_action = errors_mutated[3]
            total_errors_rate = errors_rate_mutated[0]
            total_yes_errors_rate = errors_rate_mutated[1]
            total_no_errors_rate = errors_rate_mutated[2]
            total_numeric_errors_rate = errors_rate_mutated[3]

            self.data_distribution = data_distribution

            # Accept program only if new score is higher.
            accept = min(1, score_mutated/score_best)

            self.all_results.append(
                                        (
                                            n_errors,
                                            n_errors_yes_action,
                                            n_errors_no_action,
                                            n_errors_numeric_action,
                                            total_errors_rate,
                                            total_yes_errors_rate,
                                            total_no_errors_rate,
                                            total_numeric_errors_rate
                                        )
                                    )
            # If the new synthesized program is better
            if accept == 1:
                self.tree_string = new_tree_string
                self.tree_column = new_tree_column
                self.passed_results.append(
                                            (
                                                n_errors,
                                                n_errors_yes_action,
                                                n_errors_no_action,
                                                n_errors_numeric_action,
                                                total_errors_rate,
                                                total_yes_errors_rate,
                                                total_no_errors_rate,
                                                total_numeric_errors_rate
                                            )
                                        )
                with open(self.sub_folder_batch + '/' + self.file_name + '.txt', 'a') as f:
                    print('Iteration -', i, 'New program accepted - Score = ', 
                            score_mutated,'Error rate = ', errors_rate_mutated, 
                            'n_errors = ', n_errors, file=f)

            elapsed_time = time.time() - start
            with open(self.sub_folder_batch + '/' + self.file_name + '.txt', 'a') as f:
                print('Iteration -', i, '- Elapsed time: ', elapsed_time, file=f)
        
        best_program_string = self.tree_string.generate_program()
        best_program_column = self.tree_column.generate_program()
        script_best_player = self.generate_player(
                                                best_program_string,
                                                best_program_column
                                                )

        full_run_elapsed_time = time.time() - full_run
        with open(self.sub_folder_batch + '/' + self.file_name + '.txt', 'a') as f:
            print('Full program elapsed time = ', full_run_elapsed_time, file=f)

        return best_program_string, best_program_column, script_best_player, self.tree_string, self.tree_column

    def generate_oracle_data_parallel(self, player1, player2, n_cores, n_games):
        """ 
        Generate data in parallel by playing games between player_1 and 
        player_2. 
        """
        
        # ProcessPoolExecutor() will take care of joining() and closing()
        # the processes after they are finished.
        with ProcessPoolExecutor(max_workers=n_cores) as executor:
            # Specify which arguments will be used for each parallel call
            args = (
                    (player_1, 
                    player_2, 
                    Game(self.n_players, self.dice_number, self.dice_value, 
                        self.column_range, self.offset, self.initial_height
                        ), 
                    self.max_game_length,
                    i
                    ) 
                    for i in range(n_games)
                )
            
            executor.map(self.play_single_game, args)
        
        full_data = []
        for i in range(self.n_games):
            # Read the dataset
            with open('data/' + self.dataset_name + '_' + str(i), "rb") as f:
                while True:
                    try:
                        full_data.append(pickle.load(f))
                    except EOFError:
                        break
        # Append game data to file
        with open('data/' + self.dataset_name + '_fulldata', 'ab') as f:
            for data in full_data:
                pickle.dump(data, f)

    def calculate_score_function(self, program, data_string, data_column):
        """ 
        Score function that calculates who the program passed as parameter 
        "imitates" the actions taken by the oracle in the saved dataset.
        Return this program's score.
        """
        errors, errors_rate, data_distribution = self.calculate_errors(
                                                                program, 
                                                                data_string,
                                                                data_column
                                                                )
        score = math.exp(-self.beta * errors_rate[0])
        return score, errors, errors_rate, data_distribution

    def calculate_errors(self, program, data_string, data_column):
        """ 
        Calculate how many times the program passed as parameter chose a 
        different action when compared to the oracle (actions from dataset).
        Return:
            - n_errors is the number of errors that the program chose when 
              compared to the actions chosen by the oracle.
            - n_errors_yes_action is the number of errors that the program 
              chose for the "yes" action.
            - n_errors_no_action is the number of errors that the program 
              chose for the "no" action.
            - n_errors_numeric_action is the number of errors that the program 
              chose when compared to the "numeric" actions chosen by the oracle.
            - chosen_default_action is the number of times the program chose
              the default action (this means it returned false for every if
              condition). Given in percentage related to the dataset.
        """
        n_errors = 0
        n_errors_yes_action = 0
        n_errors_no_action = 0
        n_errors_numeric_action = 0

        n_data_yes_action = 0
        n_data_no_action = 0
        n_data_numeric_action = 0

        # Yes / No actions
        for i in range(len(data_string)):
            chosen_play = program.get_action(data_string[i][0])
            oracle_play = data_string[i][1]
            # Compare the action chosen by the synthesized script and the oracle
            if chosen_play != oracle_play:
                n_errors += 1

                if oracle_play == 'y':
                    n_errors_yes_action += 1
                else:
                    n_errors_no_action += 1

            #For report purposes
            if oracle_play == 'y':
                n_data_yes_action += 1
            else:
                n_data_no_action += 1

        # Column actions
        for i in range(len(data_column)):
            chosen_play = program.get_action(data_column[i][0])
            oracle_play = data_column[i][1]
            # Compare the action chosen by the synthesized script and the oracle
            if chosen_play != oracle_play:
                n_errors += 1
                n_errors_numeric_action += 1

            #For report purposes
            n_data_numeric_action += 1

        # Proportion yes / no actions
        if n_data_no_action == 0:
            weight = 1
        else:
            weight = n_data_yes_action / n_data_no_action
        n_errors_no_action = n_errors_no_action * weight
        n_data_no_action = n_data_no_action * weight
        total_errors_rate = (n_errors_no_action + n_errors_yes_action + n_errors_numeric_action) / (n_data_yes_action + n_data_no_action + n_data_numeric_action)


        if n_data_yes_action == 0:
            total_yes_errors_rate = 0
        else:
            total_yes_errors_rate = n_errors_yes_action / n_data_yes_action
        if n_data_no_action == 0:
            total_no_errors_rate = 0
        else:
            total_no_errors_rate = n_errors_no_action / n_data_no_action
        if n_data_numeric_action == 0:
            total_numeric_errors_rate = 0
        else:
            total_numeric_errors_rate = n_errors_numeric_action / n_data_numeric_action
        errors = (
                    n_errors, n_errors_yes_action, 
                    n_errors_no_action, n_errors_numeric_action
                )
        errors_rate = (
                        total_errors_rate, 
                        total_yes_errors_rate,
                        total_no_errors_rate,
                        total_numeric_errors_rate
                    )
        data_distribution = (
                            n_data_yes_action,
                            n_data_no_action,
                            n_data_numeric_action  
                        )
        return errors, errors_rate, data_distribution

    def generate_player(self, program_string, program_column):
        """ Generate a Player object given the program string. """

        script = Script(
                        program_string, 
                        program_column, 
                        self.n_iterations, 
                        self.tree_max_nodes
                    )
        return self._string_to_object(script._generateTextScript(self.file_name))

    def _string_to_object(self, str_class, *args, **kwargs):
        """ Transform a program written inside str_class to an object. """
        exec(str_class)
        class_name = re.search("class (.*):", str_class).group(1).partition("(")[0]
        return locals()[class_name](*args, **kwargs)

    def sample_data_from_importance_threshold(self):
        """ Sample states that have importance higher than self.threshold. """
        data_string = [d for d in self.string_data if d[3] >= self.threshold]
        data_column = [d for d in self.column_data if d[3] >= self.threshold]
        return data_string, data_column

    def importance_graph(self, path):
        """ 
        Generate a graph plotting the importance of the sorted dataset and the
        average of the game length of the states. 
        """

        sorted_data = []
        with open(self.dataset_name, "rb") as f:
            while True:
                try:
                    sorted_data.append(pickle.load(f))
                except EOFError:
                    break
        
        x = [i for i in range(len(sorted_data))]
        y1 = [sorted_data[i][3] for i in range(len(sorted_data))]
        game_length = [
                        (sorted_data[i][4] * 100)/sorted_data[i][5] 
                        for i in range(len(sorted_data))
                    ]

        intervals = [1, 100, 500, 1000, 5000, 10000, 20000]

        for interval in intervals:
            y2 = []
            start = 1
            it = range(0, len(game_length), interval)
            for i in it:
                data_sum = 0
                if start * interval > len(game_length):
                    my_slice =  game_length[i:]
                    data_sum = sum(my_slice) / len(my_slice)
                else:
                    my_slice = game_length[i:start * interval]
                    data_sum = sum(my_slice) / len(my_slice)
                y2.append(data_sum)
                start += 1
            
            fig, ax1 = plt.subplots()

            ax2 = ax1.twinx()
            ax1.plot(x, y1, 'g-', label='Importance')
            ax2.plot(it, y2, 'b-', label='Game length')
            ax1.legend(loc='upper center')
            ax2.legend(loc='best')

            ax1.set_xlabel('States')
            ax1.set_ylabel('Importance')
            ylabel = 'Average game length percentage of ' + str(interval) + \
                    ' states'
            ax2.set_ylabel(ylabel)

            plt.suptitle("Importance of states - Descending order")
            plt.savefig("importance_graph_" + str(interval))
            plt.close()

    def sort_data_by_importance(self):
        """ Sort the oracle dataset by their importance. """

        if len(self.data) == 0:
            with open(self.dataset_name, "rb") as f:
                while True:
                    try:
                        self.data.append(pickle.load(f))
                    except EOFError:
                        break

        self.data = sorted(self.data, key=lambda tup: tup[3], reverse = True)

        with open(self.dataset_name + 'sorted', 'ab') as f:
            for i in range(len(self.data)):
                pickle.dump(self.data[i], f)

    def play_single_game(self, args):
        """ Play a single game between player_1 and player_2. """

        player_1 = args[0]
        player_2 = args[1]
        game = args[2]
        max_game_length = args[3]
        iteration = args[4]

        is_over = False
        rounds = -1
        # actions_taken actions in a row from a UCTPlayer player. 
        # List of tuples (action taken, player turn, Game instance).
        # If players change turn, empty the list.
        actions_taken = []
        actions_from_player = 1

        single_game_data = []

        # Game loop
        while not is_over:
            rounds += 1
            moves = game.available_moves()
            if game.is_player_busted(moves):
                actions_taken = []
                actions_from_player = game.player_turn
                continue
            else:
                # UCTPlayer players receives an extra parameter in order to
                # maintain the tree between plays whenever possible
                if game.player_turn == 1 and isinstance(player_1, UCTPlayer):
                    if actions_from_player == game.player_turn:
                        chosen_play = player_1.get_action(game, [])
                    else:
                        chosen_play = player_1.get_action(game, actions_taken)
                elif game.player_turn == 1 and not isinstance(player_1, UCTPlayer):
                        chosen_play = player_1.get_action(game)
                elif game.player_turn == 2 and isinstance(player_2, UCTPlayer):
                    if actions_from_player == game.player_turn:
                        chosen_play = player_2.get_action(game, [])
                    else:
                        chosen_play = player_2.get_action(game, actions_taken)
                elif game.player_turn == 2 and not isinstance(player_2, UCTPlayer):
                        chosen_play = player_2.get_action(game)

                if game.player_turn == 1:
                    q_a = dict(player_1.q_a_root)
                else:
                    q_a = dict(player_2.q_a_root)
                if len(moves) > 1:
                    importance = q_a[max(q_a, key=q_a.get)] - q_a[min(q_a, key=q_a.get)]
                    single_game_data.append([game.clone(), chosen_play, q_a, importance, rounds])                
                # Needed because game.play() can automatically change 
                # the player_turn attribute.
                actual_player = game.player_turn
                
                # Clear the plays info so far if player_turn 
                # changed last iteration.
                if actions_from_player != actual_player:
                    actions_taken = []
                    actions_from_player = game.player_turn

                # Apply the chosen_play in the game
                game.play(chosen_play)

                # Save game history
                actions_taken.append((chosen_play, actual_player, game.clone()))

            if rounds > max_game_length:
                is_over = True
            else:
                _, is_over = game.is_finished()
        # Add the total number of rounds to the single game data
        for data in single_game_data:
            data.append(rounds)
        # Append game data to file
        with open('data/' + self.dataset_name + '_' + str(iteration), 'ab') as f:
            for data in single_game_data:
                data = tuple(data)
                pickle.dump(data, f)
